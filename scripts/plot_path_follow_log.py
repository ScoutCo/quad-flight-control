import argparse
from pathlib import Path
from typing import Union

import matplotlib
matplotlib.use("TkAgg")
import matplotlib.pyplot as plt

import numpy as np


def plot_flight_log(log_path: Union[str, Path]) -> None:
    """
    Load a CSV generated by the path follower script and plot actual vs desired position,
    velocity, and yaw traces for quick post-flight inspection.
    """

    lp = Path(log_path)
    if not lp.exists():
        raise FileNotFoundError(f"Flight log not found: {lp}")

    data = np.genfromtxt(lp, delimiter=",", names=True)
    if data.size == 0:
        raise ValueError(f"Flight log is empty: {lp}")
    data = np.atleast_1d(data)

    t = data["t_s"]
    col_names = set(data.dtype.names or [])

    has_feedforward = {"feedforward_vx", "feedforward_vy", "feedforward_vz"}.issubset(
        col_names
    )
    has_yaw_age = "actual_yaw_age_s" in col_names
    has_yaw_source = "actual_yaw_source" in col_names

    n_rows = 3 + (1 if has_yaw_age else 0)
    fig_height = 4 * n_rows
    fig, axes = plt.subplots(n_rows, 1, figsize=(11, fig_height), sharex=True)
    axes = np.atleast_1d(axes)

    # Position comparison
    axes[0].plot(t, data["plan_x"], label="plan_x")
    axes[0].plot(t, data["plan_y"], label="plan_y")
    axes[0].plot(t, data["plan_z"], label="plan_z")
    axes[0].plot(t, data["actual_x"], "--", label="actual_x")
    axes[0].plot(t, data["actual_y"], "--", label="actual_y")
    axes[0].plot(t, data["actual_z"], "--", label="actual_z")
    axes[0].set_ylabel("Position [m]")
    axes[0].set_title(f"Flight Controller Path Follow Log ({lp.name})")
    axes[0].legend(loc="upper right", ncol=2)

    # Velocity comparison (commanded vs actual)
    axes[1].plot(t, data["smoothed_vx"], label="cmd_vx")
    axes[1].plot(t, data["smoothed_vy"], label="cmd_vy")
    axes[1].plot(t, data["smoothed_vz"], label="cmd_vz")
    if has_feedforward:
        axes[1].plot(t, data["feedforward_vx"], ":", label="ff_vx")
        axes[1].plot(t, data["feedforward_vy"], ":", label="ff_vy")
        axes[1].plot(t, data["feedforward_vz"], ":", label="ff_vz")
    axes[1].plot(t, data["actual_vx"], "--", label="actual_vx")
    axes[1].plot(t, data["actual_vy"], "--", label="actual_vy")
    axes[1].plot(t, data["actual_vz"], "--", label="actual_vz")
    axes[1].set_ylabel("Velocity [m/s]")
    axes[1].legend(loc="upper right", ncol=2 if not has_feedforward else 3)

    # Yaw comparison
    axes[2].plot(t, data["plan_yaw_deg"], label="plan_yaw_deg")
    axes[2].plot(t, data["actual_yaw_deg"], "--", label="actual_yaw_deg")

    if has_yaw_source:
        raw_sources = data["actual_yaw_source"]
        # np.genfromtxt returns fixed-width byte strings; decode if needed.
        if raw_sources.dtype.kind in {"S", "a"}:
            yaw_sources = np.char.decode(raw_sources, encoding="utf-8")
        else:
            yaw_sources = raw_sources.astype(str)

        unique_sources = [src for src in np.unique(yaw_sources) if src and src != "nan"]
        if unique_sources:
            cmap = plt.get_cmap("tab10")
            for idx, src in enumerate(unique_sources):
                mask = yaw_sources == src
                axes[2].scatter(
                    t[mask],
                    data["actual_yaw_deg"][mask],
                    s=16,
                    color=cmap(idx % 10),
                    alpha=0.7,
                    label=f"yaw src: {src}",
                )

    axes[2].set_ylabel("Yaw [deg]")
    axes[2].legend(loc="upper right")

    # Optional yaw age plot
    last_axis = axes[-1]
    if has_yaw_age:
        last_axis.plot(t, data["actual_yaw_age_s"], label="yaw_age")
        last_axis.axhline(1.5, color="r", linestyle=":", label="stale threshold")
        last_axis.set_ylabel("Yaw age [s]")
        last_axis.legend(loc="upper right")

    last_axis.set_xlabel("Time [s]")

    plt.tight_layout()
    plt.show()


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Plot path follower log against desired trajectory."
    )
    parser.add_argument("log_path", help="Path to CSV logfile")
    args = parser.parse_args()
    plot_flight_log(args.log_path)


if __name__ == "__main__":
    main()
