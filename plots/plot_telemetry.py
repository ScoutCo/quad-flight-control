from __future__ import annotations

import argparse
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

if __package__ in (None, ""):
    import sys

    sys.path.append(str(Path(__file__).resolve().parents[1]))


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description="Plot reference vs actual telemetry from the path follower example."
    )
    parser.add_argument(
        "logfile",
        type=Path,
        help="Path to the CSV log generated by examples/path_follower_sinusoid.py",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=Path,
        help="Optional path to save the figure instead of displaying it.",
    )
    return parser


def plot_telemetry(df: pd.DataFrame, output: Path | None) -> None:
    time = df["time_s"].to_numpy()

    has_attitude = {"veh_roll", "veh_pitch", "veh_yaw"}.issubset(df.columns)
    has_cmd_att = {"cmd_roll", "cmd_pitch", "cmd_yaw"}.issubset(df.columns)
    has_rates = {
        "body_rate_command_x",
        "body_rate_command_y",
        "body_rate_command_z",
        "veh_body_rate_x",
        "veh_body_rate_y",
        "veh_body_rate_z",
    }.issubset(df.columns)

    rows = 3 + (1 if has_rates else 0)
    fig, axes = plt.subplots(rows, 1, figsize=(10, 4 * rows), sharex=True)
    axes = np.atleast_1d(axes)

    for comp, label in zip(("x", "y", "z"), ("X", "Y", "Z")):
        axes[0].plot(time, df[f"veh_pos_{comp}"], label=f"{label} actual")
        axes[0].plot(
            time, df[f"ref_pos_{comp}"], linestyle="--", label=f"{label} reference"
        )
    axes[0].set_ylabel("Position (m)")
    axes[0].legend(loc="upper right", fontsize="small")
    axes[0].grid(True, which="both", linestyle=":")

    for comp, label in zip(("x", "y", "z"), ("X", "Y", "Z")):
        axes[1].plot(time, df[f"veh_vel_{comp}"], label=f"{label} actual")
        axes[1].plot(
            time, df[f"ref_vel_{comp}"], linestyle="--", label=f"{label} reference"
        )
    axes[1].set_ylabel("Velocity (m/s)")
    axes[1].legend(loc="upper right", fontsize="small")
    axes[1].grid(True, which="both", linestyle=":")

    if has_attitude:
        axes[2].plot(time, np.degrees(df["veh_roll"]), label="Roll actual (deg)")
        axes[2].plot(time, np.degrees(df["veh_pitch"]), label="Pitch actual (deg)")
        axes[2].plot(time, np.degrees(df["veh_yaw"]), label="Yaw actual (deg)")
        if has_cmd_att:
            axes[2].plot(
                time,
                np.degrees(df["cmd_roll"]),
                linestyle="--",
                label="Roll cmd (deg)",
            )
            axes[2].plot(
                time,
                np.degrees(df["cmd_pitch"]),
                linestyle="--",
                label="Pitch cmd (deg)",
            )
            axes[2].plot(
                time,
                np.degrees(df["cmd_yaw"]),
                linestyle="--",
                label="Yaw cmd (deg)",
            )
        axes[2].set_ylabel("Attitude (deg)")
        axes[2].legend(loc="upper right", fontsize="small")
    else:
        if "thrust" in df.columns:
            thrust_series = df["thrust"].to_numpy()
        else:
            thrust_series = np.zeros_like(time)
        axes[2].plot(time, thrust_series, label="Thrust (N)")
        axes[2].set_ylabel("Thrust (N)")
        axes[2].legend(loc="upper right", fontsize="small")

    if has_rates:
        axes[3].plot(time, df["veh_body_rate_x"], label="Body rate X")
        axes[3].plot(time, df["veh_body_rate_y"], label="Body rate Y")
        axes[3].plot(time, df["veh_body_rate_z"], label="Body rate Z")
        axes[3].plot(time, df["body_rate_command_x"], "--", label="Cmd rate X")
        axes[3].plot(time, df["body_rate_command_y"], "--", label="Cmd rate Y")
        axes[3].plot(time, df["body_rate_command_z"], "--", label="Cmd rate Z")
        axes[3].set_ylabel("Body Rates (rad/s)")
        axes[3].legend(loc="upper right", fontsize="small")
        axes[3].grid(True, which="both", linestyle=":")

    axes[-1].set_xlabel("Time (s)")
    axes[-1].grid(True, which="both", linestyle=":")

    fig.tight_layout()

    if output:
        output.parent.mkdir(parents=True, exist_ok=True)
        fig.savefig(output, dpi=200)
    else:
        plt.show()


def main() -> None:
    parser = build_parser()
    args = parser.parse_args()

    if not args.logfile.exists():
        raise SystemExit(f"Telemetry log not found: {args.logfile}")

    df = pd.read_csv(args.logfile)
    plot_telemetry(df, args.output)


if __name__ == "__main__":
    main()
