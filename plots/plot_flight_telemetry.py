#!/usr/bin/env python3

"""Plot telemetry produced by path_follow_flight.py."""

from __future__ import annotations

import argparse
import numpy as np
import matplotlib.pyplot as plt


def load_log(path: str) -> dict[str, np.ndarray]:
    data = np.genfromtxt(path, delimiter=",", names=True)
    if data.ndim == 0:
        data = np.array([data])
    return {name: data[name] for name in data.dtype.names}


def plot_position(axs, log):
    axs[0].plot(log["t_s"], log["plan_x"], label="plan")
    axs[0].plot(log["t_s"], log["actual_x"], label="actual")
    axs[0].set_ylabel("North (m)")

    axs[1].plot(log["t_s"], log["plan_y"], label="plan")
    axs[1].plot(log["t_s"], log["actual_y"], label="actual")
    axs[1].set_ylabel("East (m)")

    axs[2].plot(log["t_s"], log["plan_z"], label="plan")
    axs[2].plot(log["t_s"], log["actual_z"], label="actual")
    axs[2].set_ylabel("Down (m)")
    axs[2].set_xlabel("Time (s)")

    axs[0].legend(loc="upper right")


def plot_velocity(axs, log):
    axs[0].plot(log["t_s"], log["cmd_vx"], label="cmd")
    axs[0].plot(log["t_s"], log["actual_vx"], label="actual")
    axs[0].set_ylabel("Vx (m/s)")

    axs[1].plot(log["t_s"], log["cmd_vy"], label="cmd")
    axs[1].plot(log["t_s"], log["actual_vy"], label="actual")
    axs[1].set_ylabel("Vy (m/s)")

    axs[2].plot(log["t_s"], log["cmd_vz"], label="cmd")
    axs[2].plot(log["t_s"], log["actual_vz"], label="actual")
    axs[2].set_ylabel("Vz (m/s)")
    axs[2].set_xlabel("Time (s)")

    axs[0].legend(loc="upper right")


def plot_yaw(ax, log):
    ax.plot(log["t_s"], np.degrees(log["plan_yaw_rad"]), label="plan")
    ax.plot(log["t_s"], np.degrees(log["actual_yaw_rad"]), label="actual")
    ax.set_ylabel("Yaw (deg)")
    ax.set_xlabel("Time (s)")
    ax.legend(loc="upper right")


def main() -> None:
    parser = argparse.ArgumentParser(description="Plot flight telemetry logs")
    parser.add_argument("log", help="CSV log generated by path_follow_flight.py")
    args = parser.parse_args()

    log = load_log(args.log)

    fig_pos, axs_pos = plt.subplots(3, 1, sharex=True, figsize=(10, 8))
    fig_pos.suptitle("Position vs Plan (NED)")
    plot_position(axs_pos, log)

    fig_vel, axs_vel = plt.subplots(3, 1, sharex=True, figsize=(10, 8))
    fig_vel.suptitle("Velocity vs Command (NED)")
    plot_velocity(axs_vel, log)

    fig_yaw, ax_yaw = plt.subplots(figsize=(10, 4))
    fig_yaw.suptitle("Yaw Tracking")
    plot_yaw(ax_yaw, log)

    plt.show()


if __name__ == "__main__":
    main()
